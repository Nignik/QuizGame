// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: src/Packets.proto
// Protobuf C++ Version: 4.25.1

#ifndef GOOGLE_PROTOBUF_INCLUDED_src_2fPackets_2eproto_2epb_2eh
#define GOOGLE_PROTOBUF_INCLUDED_src_2fPackets_2eproto_2epb_2eh

#include <limits>
#include <string>
#include <type_traits>
#include <utility>

#include "google/protobuf/port_def.inc"
#if PROTOBUF_VERSION < 4025000
#error "This file was generated by a newer version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please update"
#error "your headers."
#endif  // PROTOBUF_VERSION

#if 4025001 < PROTOBUF_MIN_PROTOC_VERSION
#error "This file was generated by an older version of protoc which is"
#error "incompatible with your Protocol Buffer headers. Please"
#error "regenerate this file with a newer version of protoc."
#endif  // PROTOBUF_MIN_PROTOC_VERSION
#include "google/protobuf/port_undef.inc"
#include "google/protobuf/io/coded_stream.h"
#include "google/protobuf/arena.h"
#include "google/protobuf/arenastring.h"
#include "google/protobuf/generated_message_bases.h"
#include "google/protobuf/generated_message_tctable_decl.h"
#include "google/protobuf/generated_message_util.h"
#include "google/protobuf/metadata_lite.h"
#include "google/protobuf/generated_message_reflection.h"
#include "google/protobuf/message.h"
#include "google/protobuf/repeated_field.h"  // IWYU pragma: export
#include "google/protobuf/extension_set.h"  // IWYU pragma: export
#include "google/protobuf/generated_enum_reflection.h"
#include "google/protobuf/unknown_field_set.h"
// @@protoc_insertion_point(includes)

// Must be included last.
#include "google/protobuf/port_def.inc"

#define PROTOBUF_INTERNAL_EXPORT_src_2fPackets_2eproto

namespace google {
namespace protobuf {
namespace internal {
class AnyMetadata;
}  // namespace internal
}  // namespace protobuf
}  // namespace google

// Internal implementation detail -- do not use these members.
struct TableStruct_src_2fPackets_2eproto {
  static const ::uint32_t offsets[];
};
extern const ::google::protobuf::internal::DescriptorTable
    descriptor_table_src_2fPackets_2eproto;
class ClientAnswer;
struct ClientAnswerDefaultTypeInternal;
extern ClientAnswerDefaultTypeInternal _ClientAnswer_default_instance_;
class ClientLogin;
struct ClientLoginDefaultTypeInternal;
extern ClientLoginDefaultTypeInternal _ClientLogin_default_instance_;
class MessageEnvelope;
struct MessageEnvelopeDefaultTypeInternal;
extern MessageEnvelopeDefaultTypeInternal _MessageEnvelope_default_instance_;
class QuizChangeRequest;
struct QuizChangeRequestDefaultTypeInternal;
extern QuizChangeRequestDefaultTypeInternal _QuizChangeRequest_default_instance_;
class QuizFilePaths;
struct QuizFilePathsDefaultTypeInternal;
extern QuizFilePathsDefaultTypeInternal _QuizFilePaths_default_instance_;
class QuizFilePathsRequest;
struct QuizFilePathsRequestDefaultTypeInternal;
extern QuizFilePathsRequestDefaultTypeInternal _QuizFilePathsRequest_default_instance_;
class ServerQuestion;
struct ServerQuestionDefaultTypeInternal;
extern ServerQuestionDefaultTypeInternal _ServerQuestion_default_instance_;
class ServerVerdict;
struct ServerVerdictDefaultTypeInternal;
extern ServerVerdictDefaultTypeInternal _ServerVerdict_default_instance_;
namespace google {
namespace protobuf {
}  // namespace protobuf
}  // namespace google

enum MessageEnvelope_MessageType : int {
  MessageEnvelope_MessageType_CLIENT_LOGIN = 0,
  MessageEnvelope_MessageType_CLIENT_ANSWER = 1,
  MessageEnvelope_MessageType_SERVER_QUESTION = 2,
  MessageEnvelope_MessageType_SERVER_VERDICT = 3,
  MessageEnvelope_MessageType_QUIZ_CHANGE_REQUEST = 4,
  MessageEnvelope_MessageType_QUIZ_FILE_PATHS_REQUEST = 5,
  MessageEnvelope_MessageType_QUIZ_FILE_PATHS = 6,
  MessageEnvelope_MessageType_MessageEnvelope_MessageType_INT_MIN_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::min(),
  MessageEnvelope_MessageType_MessageEnvelope_MessageType_INT_MAX_SENTINEL_DO_NOT_USE_ =
      std::numeric_limits<::int32_t>::max(),
};

bool MessageEnvelope_MessageType_IsValid(int value);
extern const uint32_t MessageEnvelope_MessageType_internal_data_[];
constexpr MessageEnvelope_MessageType MessageEnvelope_MessageType_MessageType_MIN = static_cast<MessageEnvelope_MessageType>(0);
constexpr MessageEnvelope_MessageType MessageEnvelope_MessageType_MessageType_MAX = static_cast<MessageEnvelope_MessageType>(6);
constexpr int MessageEnvelope_MessageType_MessageType_ARRAYSIZE = 6 + 1;
const ::google::protobuf::EnumDescriptor*
MessageEnvelope_MessageType_descriptor();
template <typename T>
const std::string& MessageEnvelope_MessageType_Name(T value) {
  static_assert(std::is_same<T, MessageEnvelope_MessageType>::value ||
                    std::is_integral<T>::value,
                "Incorrect type passed to MessageType_Name().");
  return MessageEnvelope_MessageType_Name(static_cast<MessageEnvelope_MessageType>(value));
}
template <>
inline const std::string& MessageEnvelope_MessageType_Name(MessageEnvelope_MessageType value) {
  return ::google::protobuf::internal::NameOfDenseEnum<MessageEnvelope_MessageType_descriptor,
                                                 0, 6>(
      static_cast<int>(value));
}
inline bool MessageEnvelope_MessageType_Parse(absl::string_view name, MessageEnvelope_MessageType* value) {
  return ::google::protobuf::internal::ParseNamedEnum<MessageEnvelope_MessageType>(
      MessageEnvelope_MessageType_descriptor(), name, value);
}

// ===================================================================


// -------------------------------------------------------------------

class ServerVerdict final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerVerdict) */ {
 public:
  inline ServerVerdict() : ServerVerdict(nullptr) {}
  ~ServerVerdict() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerVerdict(::google::protobuf::internal::ConstantInitialized);

  inline ServerVerdict(const ServerVerdict& from)
      : ServerVerdict(nullptr, from) {}
  ServerVerdict(ServerVerdict&& from) noexcept
    : ServerVerdict() {
    *this = ::std::move(from);
  }

  inline ServerVerdict& operator=(const ServerVerdict& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerVerdict& operator=(ServerVerdict&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerVerdict& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerVerdict* internal_default_instance() {
    return reinterpret_cast<const ServerVerdict*>(
               &_ServerVerdict_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(ServerVerdict& a, ServerVerdict& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerVerdict* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerVerdict* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerVerdict* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerVerdict>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerVerdict& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerVerdict& from) {
    ServerVerdict::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerVerdict* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerVerdict";
  }
  protected:
  explicit ServerVerdict(::google::protobuf::Arena* arena);
  ServerVerdict(::google::protobuf::Arena* arena, const ServerVerdict& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kAnswerFieldNumber = 1,
    kCorrectFieldNumber = 2,
  };
  // string answer = 1;
  void clear_answer() ;
  const std::string& answer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_answer(Arg_&& arg, Args_... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* value);

  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(
      const std::string& value);
  std::string* _internal_mutable_answer();

  public:
  // bool correct = 2;
  void clear_correct() ;
  bool correct() const;
  void set_correct(bool value);

  private:
  bool _internal_correct() const;
  void _internal_set_correct(bool value);

  public:
  // @@protoc_insertion_point(class_scope:ServerVerdict)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      28, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr answer_;
    bool correct_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class ServerQuestion final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ServerQuestion) */ {
 public:
  inline ServerQuestion() : ServerQuestion(nullptr) {}
  ~ServerQuestion() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ServerQuestion(::google::protobuf::internal::ConstantInitialized);

  inline ServerQuestion(const ServerQuestion& from)
      : ServerQuestion(nullptr, from) {}
  ServerQuestion(ServerQuestion&& from) noexcept
    : ServerQuestion() {
    *this = ::std::move(from);
  }

  inline ServerQuestion& operator=(const ServerQuestion& from) {
    CopyFrom(from);
    return *this;
  }
  inline ServerQuestion& operator=(ServerQuestion&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ServerQuestion& default_instance() {
    return *internal_default_instance();
  }
  static inline const ServerQuestion* internal_default_instance() {
    return reinterpret_cast<const ServerQuestion*>(
               &_ServerQuestion_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(ServerQuestion& a, ServerQuestion& b) {
    a.Swap(&b);
  }
  inline void Swap(ServerQuestion* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ServerQuestion* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ServerQuestion* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ServerQuestion>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ServerQuestion& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ServerQuestion& from) {
    ServerQuestion::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ServerQuestion* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ServerQuestion";
  }
  protected:
  explicit ServerQuestion(::google::protobuf::Arena* arena);
  ServerQuestion(::google::protobuf::Arena* arena, const ServerQuestion& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuestionFieldNumber = 1,
  };
  // string question = 1;
  void clear_question() ;
  const std::string& question() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_question(Arg_&& arg, Args_... args);
  std::string* mutable_question();
  PROTOBUF_NODISCARD std::string* release_question();
  void set_allocated_question(std::string* value);

  private:
  const std::string& _internal_question() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_question(
      const std::string& value);
  std::string* _internal_mutable_question();

  public:
  // @@protoc_insertion_point(class_scope:ServerQuestion)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr question_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class QuizFilePathsRequest final :
    public ::google::protobuf::internal::ZeroFieldsBase /* @@protoc_insertion_point(class_definition:QuizFilePathsRequest) */ {
 public:
  inline QuizFilePathsRequest() : QuizFilePathsRequest(nullptr) {}
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuizFilePathsRequest(::google::protobuf::internal::ConstantInitialized);

  inline QuizFilePathsRequest(const QuizFilePathsRequest& from)
      : QuizFilePathsRequest(nullptr, from) {}
  QuizFilePathsRequest(QuizFilePathsRequest&& from) noexcept
    : QuizFilePathsRequest() {
    *this = ::std::move(from);
  }

  inline QuizFilePathsRequest& operator=(const QuizFilePathsRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuizFilePathsRequest& operator=(QuizFilePathsRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuizFilePathsRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuizFilePathsRequest* internal_default_instance() {
    return reinterpret_cast<const QuizFilePathsRequest*>(
               &_QuizFilePathsRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(QuizFilePathsRequest& a, QuizFilePathsRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuizFilePathsRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuizFilePathsRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuizFilePathsRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuizFilePathsRequest>(arena);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::CopyFrom;
  inline void CopyFrom(const QuizFilePathsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::CopyImpl(*this, from);
  }
  using ::google::protobuf::internal::ZeroFieldsBase::MergeFrom;
  void MergeFrom(const QuizFilePathsRequest& from) {
    ::google::protobuf::internal::ZeroFieldsBase::MergeImpl(*this, from);
  }
  public:

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "QuizFilePathsRequest";
  }
  protected:
  explicit QuizFilePathsRequest(::google::protobuf::Arena* arena);
  QuizFilePathsRequest(::google::protobuf::Arena* arena, const QuizFilePathsRequest& from);
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // @@protoc_insertion_point(class_scope:QuizFilePathsRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class QuizFilePaths final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QuizFilePaths) */ {
 public:
  inline QuizFilePaths() : QuizFilePaths(nullptr) {}
  ~QuizFilePaths() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuizFilePaths(::google::protobuf::internal::ConstantInitialized);

  inline QuizFilePaths(const QuizFilePaths& from)
      : QuizFilePaths(nullptr, from) {}
  QuizFilePaths(QuizFilePaths&& from) noexcept
    : QuizFilePaths() {
    *this = ::std::move(from);
  }

  inline QuizFilePaths& operator=(const QuizFilePaths& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuizFilePaths& operator=(QuizFilePaths&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuizFilePaths& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuizFilePaths* internal_default_instance() {
    return reinterpret_cast<const QuizFilePaths*>(
               &_QuizFilePaths_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(QuizFilePaths& a, QuizFilePaths& b) {
    a.Swap(&b);
  }
  inline void Swap(QuizFilePaths* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuizFilePaths* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuizFilePaths* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuizFilePaths>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuizFilePaths& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QuizFilePaths& from) {
    QuizFilePaths::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuizFilePaths* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "QuizFilePaths";
  }
  protected:
  explicit QuizFilePaths(::google::protobuf::Arena* arena);
  QuizFilePaths(::google::protobuf::Arena* arena, const QuizFilePaths& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuizPathsFieldNumber = 1,
  };
  // repeated string quizPaths = 1;
  int quizpaths_size() const;
  private:
  int _internal_quizpaths_size() const;

  public:
  void clear_quizpaths() ;
  const std::string& quizpaths(int index) const;
  std::string* mutable_quizpaths(int index);
  void set_quizpaths(int index, const std::string& value);
  void set_quizpaths(int index, std::string&& value);
  void set_quizpaths(int index, const char* value);
  void set_quizpaths(int index, const char* value, std::size_t size);
  void set_quizpaths(int index, absl::string_view value);
  std::string* add_quizpaths();
  void add_quizpaths(const std::string& value);
  void add_quizpaths(std::string&& value);
  void add_quizpaths(const char* value);
  void add_quizpaths(const char* value, std::size_t size);
  void add_quizpaths(absl::string_view value);
  const ::google::protobuf::RepeatedPtrField<std::string>& quizpaths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* mutable_quizpaths();

  private:
  const ::google::protobuf::RepeatedPtrField<std::string>& _internal_quizpaths() const;
  ::google::protobuf::RepeatedPtrField<std::string>* _internal_mutable_quizpaths();

  public:
  // @@protoc_insertion_point(class_scope:QuizFilePaths)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::RepeatedPtrField<std::string> quizpaths_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class QuizChangeRequest final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:QuizChangeRequest) */ {
 public:
  inline QuizChangeRequest() : QuizChangeRequest(nullptr) {}
  ~QuizChangeRequest() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR QuizChangeRequest(::google::protobuf::internal::ConstantInitialized);

  inline QuizChangeRequest(const QuizChangeRequest& from)
      : QuizChangeRequest(nullptr, from) {}
  QuizChangeRequest(QuizChangeRequest&& from) noexcept
    : QuizChangeRequest() {
    *this = ::std::move(from);
  }

  inline QuizChangeRequest& operator=(const QuizChangeRequest& from) {
    CopyFrom(from);
    return *this;
  }
  inline QuizChangeRequest& operator=(QuizChangeRequest&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const QuizChangeRequest& default_instance() {
    return *internal_default_instance();
  }
  static inline const QuizChangeRequest* internal_default_instance() {
    return reinterpret_cast<const QuizChangeRequest*>(
               &_QuizChangeRequest_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(QuizChangeRequest& a, QuizChangeRequest& b) {
    a.Swap(&b);
  }
  inline void Swap(QuizChangeRequest* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(QuizChangeRequest* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  QuizChangeRequest* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<QuizChangeRequest>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const QuizChangeRequest& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const QuizChangeRequest& from) {
    QuizChangeRequest::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(QuizChangeRequest* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "QuizChangeRequest";
  }
  protected:
  explicit QuizChangeRequest(::google::protobuf::Arena* arena);
  QuizChangeRequest(::google::protobuf::Arena* arena, const QuizChangeRequest& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kQuizPathFieldNumber = 1,
    kRepeatsFieldNumber = 2,
  };
  // string quizPath = 1;
  void clear_quizpath() ;
  const std::string& quizpath() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_quizpath(Arg_&& arg, Args_... args);
  std::string* mutable_quizpath();
  PROTOBUF_NODISCARD std::string* release_quizpath();
  void set_allocated_quizpath(std::string* value);

  private:
  const std::string& _internal_quizpath() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_quizpath(
      const std::string& value);
  std::string* _internal_mutable_quizpath();

  public:
  // int32 repeats = 2;
  void clear_repeats() ;
  ::int32_t repeats() const;
  void set_repeats(::int32_t value);

  private:
  ::int32_t _internal_repeats() const;
  void _internal_set_repeats(::int32_t value);

  public:
  // @@protoc_insertion_point(class_scope:QuizChangeRequest)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      34, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr quizpath_;
    ::int32_t repeats_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class ClientLogin final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientLogin) */ {
 public:
  inline ClientLogin() : ClientLogin(nullptr) {}
  ~ClientLogin() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientLogin(::google::protobuf::internal::ConstantInitialized);

  inline ClientLogin(const ClientLogin& from)
      : ClientLogin(nullptr, from) {}
  ClientLogin(ClientLogin&& from) noexcept
    : ClientLogin() {
    *this = ::std::move(from);
  }

  inline ClientLogin& operator=(const ClientLogin& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientLogin& operator=(ClientLogin&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientLogin& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientLogin* internal_default_instance() {
    return reinterpret_cast<const ClientLogin*>(
               &_ClientLogin_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(ClientLogin& a, ClientLogin& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientLogin* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientLogin* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientLogin* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientLogin>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientLogin& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientLogin& from) {
    ClientLogin::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientLogin* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientLogin";
  }
  protected:
  explicit ClientLogin(::google::protobuf::Arena* arena);
  ClientLogin(::google::protobuf::Arena* arena, const ClientLogin& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // @@protoc_insertion_point(class_scope:ClientLogin)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 1, 0,
      24, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class ClientAnswer final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:ClientAnswer) */ {
 public:
  inline ClientAnswer() : ClientAnswer(nullptr) {}
  ~ClientAnswer() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR ClientAnswer(::google::protobuf::internal::ConstantInitialized);

  inline ClientAnswer(const ClientAnswer& from)
      : ClientAnswer(nullptr, from) {}
  ClientAnswer(ClientAnswer&& from) noexcept
    : ClientAnswer() {
    *this = ::std::move(from);
  }

  inline ClientAnswer& operator=(const ClientAnswer& from) {
    CopyFrom(from);
    return *this;
  }
  inline ClientAnswer& operator=(ClientAnswer&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const ClientAnswer& default_instance() {
    return *internal_default_instance();
  }
  static inline const ClientAnswer* internal_default_instance() {
    return reinterpret_cast<const ClientAnswer*>(
               &_ClientAnswer_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(ClientAnswer& a, ClientAnswer& b) {
    a.Swap(&b);
  }
  inline void Swap(ClientAnswer* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(ClientAnswer* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  ClientAnswer* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<ClientAnswer>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const ClientAnswer& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const ClientAnswer& from) {
    ClientAnswer::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(ClientAnswer* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "ClientAnswer";
  }
  protected:
  explicit ClientAnswer(::google::protobuf::Arena* arena);
  ClientAnswer(::google::protobuf::Arena* arena, const ClientAnswer& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kAnswerFieldNumber = 2,
  };
  // string name = 1;
  void clear_name() ;
  const std::string& name() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_name(Arg_&& arg, Args_... args);
  std::string* mutable_name();
  PROTOBUF_NODISCARD std::string* release_name();
  void set_allocated_name(std::string* value);

  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(
      const std::string& value);
  std::string* _internal_mutable_name();

  public:
  // string answer = 2;
  void clear_answer() ;
  const std::string& answer() const;
  template <typename Arg_ = const std::string&, typename... Args_>
  void set_answer(Arg_&& arg, Args_... args);
  std::string* mutable_answer();
  PROTOBUF_NODISCARD std::string* release_answer();
  void set_allocated_answer(std::string* value);

  private:
  const std::string& _internal_answer() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_answer(
      const std::string& value);
  std::string* _internal_mutable_answer();

  public:
  // @@protoc_insertion_point(class_scope:ClientAnswer)
 private:
  class _Internal;

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      1, 2, 0,
      31, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    ::google::protobuf::internal::ArenaStringPtr name_;
    ::google::protobuf::internal::ArenaStringPtr answer_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};// -------------------------------------------------------------------

class MessageEnvelope final :
    public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:MessageEnvelope) */ {
 public:
  inline MessageEnvelope() : MessageEnvelope(nullptr) {}
  ~MessageEnvelope() override;
  template<typename = void>
  explicit PROTOBUF_CONSTEXPR MessageEnvelope(::google::protobuf::internal::ConstantInitialized);

  inline MessageEnvelope(const MessageEnvelope& from)
      : MessageEnvelope(nullptr, from) {}
  MessageEnvelope(MessageEnvelope&& from) noexcept
    : MessageEnvelope() {
    *this = ::std::move(from);
  }

  inline MessageEnvelope& operator=(const MessageEnvelope& from) {
    CopyFrom(from);
    return *this;
  }
  inline MessageEnvelope& operator=(MessageEnvelope&& from) noexcept {
    if (this == &from) return *this;
    if (GetArena() == from.GetArena()
  #ifdef PROTOBUF_FORCE_COPY_IN_MOVE
        && GetArena() != nullptr
  #endif  // !PROTOBUF_FORCE_COPY_IN_MOVE
    ) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.unknown_fields<::google::protobuf::UnknownFieldSet>(::google::protobuf::UnknownFieldSet::default_instance);
  }
  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields()
      ABSL_ATTRIBUTE_LIFETIME_BOUND {
    return _internal_metadata_.mutable_unknown_fields<::google::protobuf::UnknownFieldSet>();
  }

  static const ::google::protobuf::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::google::protobuf::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::google::protobuf::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const MessageEnvelope& default_instance() {
    return *internal_default_instance();
  }
  enum PayloadCase {
    kClientLogin = 2,
    kClientAnswer = 3,
    kServerQuestion = 4,
    kServerVerdict = 5,
    kQuizChangeRequest = 6,
    kQuizFilePathsRequest = 7,
    kQuizFilePaths = 8,
    PAYLOAD_NOT_SET = 0,
  };

  static inline const MessageEnvelope* internal_default_instance() {
    return reinterpret_cast<const MessageEnvelope*>(
               &_MessageEnvelope_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(MessageEnvelope& a, MessageEnvelope& b) {
    a.Swap(&b);
  }
  inline void Swap(MessageEnvelope* other) {
    if (other == this) return;
  #ifdef PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() != nullptr &&
        GetArena() == other->GetArena()) {
   #else  // PROTOBUF_FORCE_COPY_IN_SWAP
    if (GetArena() == other->GetArena()) {
  #endif  // !PROTOBUF_FORCE_COPY_IN_SWAP
      InternalSwap(other);
    } else {
      ::google::protobuf::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MessageEnvelope* other) {
    if (other == this) return;
    ABSL_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  MessageEnvelope* New(::google::protobuf::Arena* arena = nullptr) const final {
    return CreateMaybeMessage<MessageEnvelope>(arena);
  }
  using ::google::protobuf::Message::CopyFrom;
  void CopyFrom(const MessageEnvelope& from);
  using ::google::protobuf::Message::MergeFrom;
  void MergeFrom( const MessageEnvelope& from) {
    MessageEnvelope::MergeImpl(*this, from);
  }
  private:
  static void MergeImpl(::google::protobuf::Message& to_msg, const ::google::protobuf::Message& from_msg);
  public:
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  ::size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::google::protobuf::internal::ParseContext* ctx) final;
  ::uint8_t* _InternalSerialize(
      ::uint8_t* target, ::google::protobuf::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const { return _impl_._cached_size_.Get(); }

  private:
  ::google::protobuf::internal::CachedSize* AccessCachedSize() const final;
  void SharedCtor(::google::protobuf::Arena* arena);
  void SharedDtor();
  void InternalSwap(MessageEnvelope* other);

  private:
  friend class ::google::protobuf::internal::AnyMetadata;
  static ::absl::string_view FullMessageName() {
    return "MessageEnvelope";
  }
  protected:
  explicit MessageEnvelope(::google::protobuf::Arena* arena);
  MessageEnvelope(::google::protobuf::Arena* arena, const MessageEnvelope& from);
  public:

  static const ClassData _class_data_;
  const ::google::protobuf::Message::ClassData*GetClassData() const final;

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  using MessageType = MessageEnvelope_MessageType;
  static constexpr MessageType CLIENT_LOGIN = MessageEnvelope_MessageType_CLIENT_LOGIN;
  static constexpr MessageType CLIENT_ANSWER = MessageEnvelope_MessageType_CLIENT_ANSWER;
  static constexpr MessageType SERVER_QUESTION = MessageEnvelope_MessageType_SERVER_QUESTION;
  static constexpr MessageType SERVER_VERDICT = MessageEnvelope_MessageType_SERVER_VERDICT;
  static constexpr MessageType QUIZ_CHANGE_REQUEST = MessageEnvelope_MessageType_QUIZ_CHANGE_REQUEST;
  static constexpr MessageType QUIZ_FILE_PATHS_REQUEST = MessageEnvelope_MessageType_QUIZ_FILE_PATHS_REQUEST;
  static constexpr MessageType QUIZ_FILE_PATHS = MessageEnvelope_MessageType_QUIZ_FILE_PATHS;
  static inline bool MessageType_IsValid(int value) {
    return MessageEnvelope_MessageType_IsValid(value);
  }
  static constexpr MessageType MessageType_MIN = MessageEnvelope_MessageType_MessageType_MIN;
  static constexpr MessageType MessageType_MAX = MessageEnvelope_MessageType_MessageType_MAX;
  static constexpr int MessageType_ARRAYSIZE = MessageEnvelope_MessageType_MessageType_ARRAYSIZE;
  static inline const ::google::protobuf::EnumDescriptor* MessageType_descriptor() {
    return MessageEnvelope_MessageType_descriptor();
  }
  template <typename T>
  static inline const std::string& MessageType_Name(T value) {
    return MessageEnvelope_MessageType_Name(value);
  }
  static inline bool MessageType_Parse(absl::string_view name, MessageType* value) {
    return MessageEnvelope_MessageType_Parse(name, value);
  }

  // accessors -------------------------------------------------------

  enum : int {
    kTypeFieldNumber = 1,
    kClientLoginFieldNumber = 2,
    kClientAnswerFieldNumber = 3,
    kServerQuestionFieldNumber = 4,
    kServerVerdictFieldNumber = 5,
    kQuizChangeRequestFieldNumber = 6,
    kQuizFilePathsRequestFieldNumber = 7,
    kQuizFilePathsFieldNumber = 8,
  };
  // .MessageEnvelope.MessageType type = 1;
  void clear_type() ;
  ::MessageEnvelope_MessageType type() const;
  void set_type(::MessageEnvelope_MessageType value);

  private:
  ::MessageEnvelope_MessageType _internal_type() const;
  void _internal_set_type(::MessageEnvelope_MessageType value);

  public:
  // .ClientLogin clientLogin = 2;
  bool has_clientlogin() const;
  private:
  bool _internal_has_clientlogin() const;

  public:
  void clear_clientlogin() ;
  const ::ClientLogin& clientlogin() const;
  PROTOBUF_NODISCARD ::ClientLogin* release_clientlogin();
  ::ClientLogin* mutable_clientlogin();
  void set_allocated_clientlogin(::ClientLogin* value);
  void unsafe_arena_set_allocated_clientlogin(::ClientLogin* value);
  ::ClientLogin* unsafe_arena_release_clientlogin();

  private:
  const ::ClientLogin& _internal_clientlogin() const;
  ::ClientLogin* _internal_mutable_clientlogin();

  public:
  // .ClientAnswer clientAnswer = 3;
  bool has_clientanswer() const;
  private:
  bool _internal_has_clientanswer() const;

  public:
  void clear_clientanswer() ;
  const ::ClientAnswer& clientanswer() const;
  PROTOBUF_NODISCARD ::ClientAnswer* release_clientanswer();
  ::ClientAnswer* mutable_clientanswer();
  void set_allocated_clientanswer(::ClientAnswer* value);
  void unsafe_arena_set_allocated_clientanswer(::ClientAnswer* value);
  ::ClientAnswer* unsafe_arena_release_clientanswer();

  private:
  const ::ClientAnswer& _internal_clientanswer() const;
  ::ClientAnswer* _internal_mutable_clientanswer();

  public:
  // .ServerQuestion serverQuestion = 4;
  bool has_serverquestion() const;
  private:
  bool _internal_has_serverquestion() const;

  public:
  void clear_serverquestion() ;
  const ::ServerQuestion& serverquestion() const;
  PROTOBUF_NODISCARD ::ServerQuestion* release_serverquestion();
  ::ServerQuestion* mutable_serverquestion();
  void set_allocated_serverquestion(::ServerQuestion* value);
  void unsafe_arena_set_allocated_serverquestion(::ServerQuestion* value);
  ::ServerQuestion* unsafe_arena_release_serverquestion();

  private:
  const ::ServerQuestion& _internal_serverquestion() const;
  ::ServerQuestion* _internal_mutable_serverquestion();

  public:
  // .ServerVerdict serverVerdict = 5;
  bool has_serververdict() const;
  private:
  bool _internal_has_serververdict() const;

  public:
  void clear_serververdict() ;
  const ::ServerVerdict& serververdict() const;
  PROTOBUF_NODISCARD ::ServerVerdict* release_serververdict();
  ::ServerVerdict* mutable_serververdict();
  void set_allocated_serververdict(::ServerVerdict* value);
  void unsafe_arena_set_allocated_serververdict(::ServerVerdict* value);
  ::ServerVerdict* unsafe_arena_release_serververdict();

  private:
  const ::ServerVerdict& _internal_serververdict() const;
  ::ServerVerdict* _internal_mutable_serververdict();

  public:
  // .QuizChangeRequest quizChangeRequest = 6;
  bool has_quizchangerequest() const;
  private:
  bool _internal_has_quizchangerequest() const;

  public:
  void clear_quizchangerequest() ;
  const ::QuizChangeRequest& quizchangerequest() const;
  PROTOBUF_NODISCARD ::QuizChangeRequest* release_quizchangerequest();
  ::QuizChangeRequest* mutable_quizchangerequest();
  void set_allocated_quizchangerequest(::QuizChangeRequest* value);
  void unsafe_arena_set_allocated_quizchangerequest(::QuizChangeRequest* value);
  ::QuizChangeRequest* unsafe_arena_release_quizchangerequest();

  private:
  const ::QuizChangeRequest& _internal_quizchangerequest() const;
  ::QuizChangeRequest* _internal_mutable_quizchangerequest();

  public:
  // .QuizFilePathsRequest quizFilePathsRequest = 7;
  bool has_quizfilepathsrequest() const;
  private:
  bool _internal_has_quizfilepathsrequest() const;

  public:
  void clear_quizfilepathsrequest() ;
  const ::QuizFilePathsRequest& quizfilepathsrequest() const;
  PROTOBUF_NODISCARD ::QuizFilePathsRequest* release_quizfilepathsrequest();
  ::QuizFilePathsRequest* mutable_quizfilepathsrequest();
  void set_allocated_quizfilepathsrequest(::QuizFilePathsRequest* value);
  void unsafe_arena_set_allocated_quizfilepathsrequest(::QuizFilePathsRequest* value);
  ::QuizFilePathsRequest* unsafe_arena_release_quizfilepathsrequest();

  private:
  const ::QuizFilePathsRequest& _internal_quizfilepathsrequest() const;
  ::QuizFilePathsRequest* _internal_mutable_quizfilepathsrequest();

  public:
  // .QuizFilePaths quizFilePaths = 8;
  bool has_quizfilepaths() const;
  private:
  bool _internal_has_quizfilepaths() const;

  public:
  void clear_quizfilepaths() ;
  const ::QuizFilePaths& quizfilepaths() const;
  PROTOBUF_NODISCARD ::QuizFilePaths* release_quizfilepaths();
  ::QuizFilePaths* mutable_quizfilepaths();
  void set_allocated_quizfilepaths(::QuizFilePaths* value);
  void unsafe_arena_set_allocated_quizfilepaths(::QuizFilePaths* value);
  ::QuizFilePaths* unsafe_arena_release_quizfilepaths();

  private:
  const ::QuizFilePaths& _internal_quizfilepaths() const;
  ::QuizFilePaths* _internal_mutable_quizfilepaths();

  public:
  void clear_payload();
  PayloadCase payload_case() const;
  // @@protoc_insertion_point(class_scope:MessageEnvelope)
 private:
  class _Internal;
  void set_has_clientlogin();
  void set_has_clientanswer();
  void set_has_serverquestion();
  void set_has_serververdict();
  void set_has_quizchangerequest();
  void set_has_quizfilepathsrequest();
  void set_has_quizfilepaths();

  inline bool has_payload() const;
  inline void clear_has_payload();

  friend class ::google::protobuf::internal::TcParser;
  static const ::google::protobuf::internal::TcParseTable<
      0, 8, 7,
      0, 2>
      _table_;
  friend class ::google::protobuf::MessageLite;
  friend class ::google::protobuf::Arena;
  template <typename T>
  friend class ::google::protobuf::Arena::InternalHelper;
  using InternalArenaConstructable_ = void;
  using DestructorSkippable_ = void;
  struct Impl_ {

        inline explicit constexpr Impl_(
            ::google::protobuf::internal::ConstantInitialized) noexcept;
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena);
        inline explicit Impl_(::google::protobuf::internal::InternalVisibility visibility,
                              ::google::protobuf::Arena* arena, const Impl_& from);
    int type_;
    union PayloadUnion {
      constexpr PayloadUnion() : _constinit_{} {}
        ::google::protobuf::internal::ConstantInitialized _constinit_;
      ::ClientLogin* clientlogin_;
      ::ClientAnswer* clientanswer_;
      ::ServerQuestion* serverquestion_;
      ::ServerVerdict* serververdict_;
      ::QuizChangeRequest* quizchangerequest_;
      ::QuizFilePathsRequest* quizfilepathsrequest_;
      ::QuizFilePaths* quizfilepaths_;
    } payload_;
    mutable ::google::protobuf::internal::CachedSize _cached_size_;
    ::uint32_t _oneof_case_[1];

    PROTOBUF_TSAN_DECLARE_MEMBER
  };
  union { Impl_ _impl_; };
  friend struct ::TableStruct_src_2fPackets_2eproto;
};

// ===================================================================




// ===================================================================


#ifdef __GNUC__
#pragma GCC diagnostic push
#pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// -------------------------------------------------------------------

// ClientLogin

// string name = 1;
inline void ClientLogin::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ClientLogin::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientLogin.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientLogin::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientLogin.name)
}
inline std::string* ClientLogin::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClientLogin.name)
  return _s;
}
inline const std::string& ClientLogin::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ClientLogin::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ClientLogin::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ClientLogin::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientLogin.name)
  return _impl_.name_.Release();
}
inline void ClientLogin::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientLogin.name)
}

// -------------------------------------------------------------------

// ClientAnswer

// string name = 1;
inline void ClientAnswer::clear_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.ClearToEmpty();
}
inline const std::string& ClientAnswer::name() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientAnswer.name)
  return _internal_name();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientAnswer::set_name(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientAnswer.name)
}
inline std::string* ClientAnswer::mutable_name() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_name();
  // @@protoc_insertion_point(field_mutable:ClientAnswer.name)
  return _s;
}
inline const std::string& ClientAnswer::_internal_name() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.name_.Get();
}
inline void ClientAnswer::_internal_set_name(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.name_.Set(value, GetArena());
}
inline std::string* ClientAnswer::_internal_mutable_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.name_.Mutable( GetArena());
}
inline std::string* ClientAnswer::release_name() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientAnswer.name)
  return _impl_.name_.Release();
}
inline void ClientAnswer::set_allocated_name(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.name_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.name_.IsDefault()) {
          _impl_.name_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientAnswer.name)
}

// string answer = 2;
inline void ClientAnswer::clear_answer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& ClientAnswer::answer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ClientAnswer.answer)
  return _internal_answer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ClientAnswer::set_answer(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.answer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ClientAnswer.answer)
}
inline std::string* ClientAnswer::mutable_answer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:ClientAnswer.answer)
  return _s;
}
inline const std::string& ClientAnswer::_internal_answer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.answer_.Get();
}
inline void ClientAnswer::_internal_set_answer(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.answer_.Set(value, GetArena());
}
inline std::string* ClientAnswer::_internal_mutable_answer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.answer_.Mutable( GetArena());
}
inline std::string* ClientAnswer::release_answer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ClientAnswer.answer)
  return _impl_.answer_.Release();
}
inline void ClientAnswer::set_allocated_answer(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.answer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.answer_.IsDefault()) {
          _impl_.answer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ClientAnswer.answer)
}

// -------------------------------------------------------------------

// ServerQuestion

// string question = 1;
inline void ServerQuestion::clear_question() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.question_.ClearToEmpty();
}
inline const std::string& ServerQuestion::question() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServerQuestion.question)
  return _internal_question();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerQuestion::set_question(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.question_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServerQuestion.question)
}
inline std::string* ServerQuestion::mutable_question() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_question();
  // @@protoc_insertion_point(field_mutable:ServerQuestion.question)
  return _s;
}
inline const std::string& ServerQuestion::_internal_question() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.question_.Get();
}
inline void ServerQuestion::_internal_set_question(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.question_.Set(value, GetArena());
}
inline std::string* ServerQuestion::_internal_mutable_question() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.question_.Mutable( GetArena());
}
inline std::string* ServerQuestion::release_question() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerQuestion.question)
  return _impl_.question_.Release();
}
inline void ServerQuestion::set_allocated_question(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.question_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.question_.IsDefault()) {
          _impl_.question_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerQuestion.question)
}

// -------------------------------------------------------------------

// ServerVerdict

// string answer = 1;
inline void ServerVerdict::clear_answer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.answer_.ClearToEmpty();
}
inline const std::string& ServerVerdict::answer() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:ServerVerdict.answer)
  return _internal_answer();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void ServerVerdict::set_answer(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.answer_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:ServerVerdict.answer)
}
inline std::string* ServerVerdict::mutable_answer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_answer();
  // @@protoc_insertion_point(field_mutable:ServerVerdict.answer)
  return _s;
}
inline const std::string& ServerVerdict::_internal_answer() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.answer_.Get();
}
inline void ServerVerdict::_internal_set_answer(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.answer_.Set(value, GetArena());
}
inline std::string* ServerVerdict::_internal_mutable_answer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.answer_.Mutable( GetArena());
}
inline std::string* ServerVerdict::release_answer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:ServerVerdict.answer)
  return _impl_.answer_.Release();
}
inline void ServerVerdict::set_allocated_answer(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.answer_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.answer_.IsDefault()) {
          _impl_.answer_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:ServerVerdict.answer)
}

// bool correct = 2;
inline void ServerVerdict::clear_correct() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.correct_ = false;
}
inline bool ServerVerdict::correct() const {
  // @@protoc_insertion_point(field_get:ServerVerdict.correct)
  return _internal_correct();
}
inline void ServerVerdict::set_correct(bool value) {
  _internal_set_correct(value);
  // @@protoc_insertion_point(field_set:ServerVerdict.correct)
}
inline bool ServerVerdict::_internal_correct() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.correct_;
}
inline void ServerVerdict::_internal_set_correct(bool value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.correct_ = value;
}

// -------------------------------------------------------------------

// QuizFilePathsRequest

// -------------------------------------------------------------------

// QuizFilePaths

// repeated string quizPaths = 1;
inline int QuizFilePaths::_internal_quizpaths_size() const {
  return _internal_quizpaths().size();
}
inline int QuizFilePaths::quizpaths_size() const {
  return _internal_quizpaths_size();
}
inline void QuizFilePaths::clear_quizpaths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quizpaths_.Clear();
}
inline std::string* QuizFilePaths::add_quizpaths()
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  std::string* _s = _internal_mutable_quizpaths()->Add();
  // @@protoc_insertion_point(field_add_mutable:QuizFilePaths.quizPaths)
  return _s;
}
inline const std::string& QuizFilePaths::quizpaths(int index) const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:QuizFilePaths.quizPaths)
  return _internal_quizpaths().Get(index);
}
inline std::string* QuizFilePaths::mutable_quizpaths(int index)
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable:QuizFilePaths.quizPaths)
  return _internal_mutable_quizpaths()->Mutable(index);
}
inline void QuizFilePaths::set_quizpaths(int index, const std::string& value) {
  _internal_mutable_quizpaths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::set_quizpaths(int index, std::string&& value) {
  _internal_mutable_quizpaths()->Mutable(index)->assign(std::move(value));
  // @@protoc_insertion_point(field_set:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::set_quizpaths(int index, const char* value) {
  ABSL_DCHECK(value != nullptr);
  _internal_mutable_quizpaths()->Mutable(index)->assign(value);
  // @@protoc_insertion_point(field_set_char:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::set_quizpaths(int index, const char* value,
                              std::size_t size) {
  _internal_mutable_quizpaths()->Mutable(index)->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_set_pointer:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::set_quizpaths(int index, absl::string_view value) {
  _internal_mutable_quizpaths()->Mutable(index)->assign(value.data(),
                                                     value.size());
  // @@protoc_insertion_point(field_set_string_piece:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::add_quizpaths(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_quizpaths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::add_quizpaths(std::string&& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_quizpaths()->Add(std::move(value));
  // @@protoc_insertion_point(field_add:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::add_quizpaths(const char* value) {
  ABSL_DCHECK(value != nullptr);
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_quizpaths()->Add()->assign(value);
  // @@protoc_insertion_point(field_add_char:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::add_quizpaths(const char* value, std::size_t size) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_quizpaths()->Add()->assign(
      reinterpret_cast<const char*>(value), size);
  // @@protoc_insertion_point(field_add_pointer:QuizFilePaths.quizPaths)
}
inline void QuizFilePaths::add_quizpaths(absl::string_view value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _internal_mutable_quizpaths()->Add()->assign(value.data(), value.size());
  // @@protoc_insertion_point(field_add_string_piece:QuizFilePaths.quizPaths)
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QuizFilePaths::quizpaths() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_list:QuizFilePaths.quizPaths)
  return _internal_quizpaths();
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QuizFilePaths::mutable_quizpaths() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_mutable_list:QuizFilePaths.quizPaths)
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  return _internal_mutable_quizpaths();
}
inline const ::google::protobuf::RepeatedPtrField<std::string>&
QuizFilePaths::_internal_quizpaths() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quizpaths_;
}
inline ::google::protobuf::RepeatedPtrField<std::string>*
QuizFilePaths::_internal_mutable_quizpaths() {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return &_impl_.quizpaths_;
}

// -------------------------------------------------------------------

// QuizChangeRequest

// string quizPath = 1;
inline void QuizChangeRequest::clear_quizpath() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quizpath_.ClearToEmpty();
}
inline const std::string& QuizChangeRequest::quizpath() const
    ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:QuizChangeRequest.quizPath)
  return _internal_quizpath();
}
template <typename Arg_, typename... Args_>
inline PROTOBUF_ALWAYS_INLINE void QuizChangeRequest::set_quizpath(Arg_&& arg,
                                                     Args_... args) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.quizpath_.Set(static_cast<Arg_&&>(arg), args..., GetArena());
  // @@protoc_insertion_point(field_set:QuizChangeRequest.quizPath)
}
inline std::string* QuizChangeRequest::mutable_quizpath() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  std::string* _s = _internal_mutable_quizpath();
  // @@protoc_insertion_point(field_mutable:QuizChangeRequest.quizPath)
  return _s;
}
inline const std::string& QuizChangeRequest::_internal_quizpath() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.quizpath_.Get();
}
inline void QuizChangeRequest::_internal_set_quizpath(const std::string& value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.quizpath_.Set(value, GetArena());
}
inline std::string* QuizChangeRequest::_internal_mutable_quizpath() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  return _impl_.quizpath_.Mutable( GetArena());
}
inline std::string* QuizChangeRequest::release_quizpath() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  // @@protoc_insertion_point(field_release:QuizChangeRequest.quizPath)
  return _impl_.quizpath_.Release();
}
inline void QuizChangeRequest::set_allocated_quizpath(std::string* value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.quizpath_.SetAllocated(value, GetArena());
  #ifdef PROTOBUF_FORCE_COPY_DEFAULT_STRING
        if (_impl_.quizpath_.IsDefault()) {
          _impl_.quizpath_.Set("", GetArena());
        }
  #endif  // PROTOBUF_FORCE_COPY_DEFAULT_STRING
  // @@protoc_insertion_point(field_set_allocated:QuizChangeRequest.quizPath)
}

// int32 repeats = 2;
inline void QuizChangeRequest::clear_repeats() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.repeats_ = 0;
}
inline ::int32_t QuizChangeRequest::repeats() const {
  // @@protoc_insertion_point(field_get:QuizChangeRequest.repeats)
  return _internal_repeats();
}
inline void QuizChangeRequest::set_repeats(::int32_t value) {
  _internal_set_repeats(value);
  // @@protoc_insertion_point(field_set:QuizChangeRequest.repeats)
}
inline ::int32_t QuizChangeRequest::_internal_repeats() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return _impl_.repeats_;
}
inline void QuizChangeRequest::_internal_set_repeats(::int32_t value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.repeats_ = value;
}

// -------------------------------------------------------------------

// MessageEnvelope

// .MessageEnvelope.MessageType type = 1;
inline void MessageEnvelope::clear_type() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  _impl_.type_ = 0;
}
inline ::MessageEnvelope_MessageType MessageEnvelope::type() const {
  // @@protoc_insertion_point(field_get:MessageEnvelope.type)
  return _internal_type();
}
inline void MessageEnvelope::set_type(::MessageEnvelope_MessageType value) {
  _internal_set_type(value);
  // @@protoc_insertion_point(field_set:MessageEnvelope.type)
}
inline ::MessageEnvelope_MessageType MessageEnvelope::_internal_type() const {
  PROTOBUF_TSAN_READ(&_impl_._tsan_detect_race);
  return static_cast<::MessageEnvelope_MessageType>(_impl_.type_);
}
inline void MessageEnvelope::_internal_set_type(::MessageEnvelope_MessageType value) {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  ;
  _impl_.type_ = value;
}

// .ClientLogin clientLogin = 2;
inline bool MessageEnvelope::has_clientlogin() const {
  return payload_case() == kClientLogin;
}
inline bool MessageEnvelope::_internal_has_clientlogin() const {
  return payload_case() == kClientLogin;
}
inline void MessageEnvelope::set_has_clientlogin() {
  _impl_._oneof_case_[0] = kClientLogin;
}
inline void MessageEnvelope::clear_clientlogin() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kClientLogin) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.clientlogin_;
    }
    clear_has_payload();
  }
}
inline ::ClientLogin* MessageEnvelope::release_clientlogin() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.clientLogin)
  if (payload_case() == kClientLogin) {
    clear_has_payload();
    auto* temp = _impl_.payload_.clientlogin_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.clientlogin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientLogin& MessageEnvelope::_internal_clientlogin() const {
  return payload_case() == kClientLogin ? *_impl_.payload_.clientlogin_ : reinterpret_cast<::ClientLogin&>(::_ClientLogin_default_instance_);
}
inline const ::ClientLogin& MessageEnvelope::clientlogin() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.clientLogin)
  return _internal_clientlogin();
}
inline ::ClientLogin* MessageEnvelope::unsafe_arena_release_clientlogin() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.clientLogin)
  if (payload_case() == kClientLogin) {
    clear_has_payload();
    auto* temp = _impl_.payload_.clientlogin_;
    _impl_.payload_.clientlogin_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_clientlogin(::ClientLogin* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_clientlogin();
    _impl_.payload_.clientlogin_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.clientLogin)
}
inline ::ClientLogin* MessageEnvelope::_internal_mutable_clientlogin() {
  if (payload_case() != kClientLogin) {
    clear_payload();
    set_has_clientlogin();
    _impl_.payload_.clientlogin_ = CreateMaybeMessage<::ClientLogin>(GetArena());
  }
  return _impl_.payload_.clientlogin_;
}
inline ::ClientLogin* MessageEnvelope::mutable_clientlogin() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ClientLogin* _msg = _internal_mutable_clientlogin();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.clientLogin)
  return _msg;
}

// .ClientAnswer clientAnswer = 3;
inline bool MessageEnvelope::has_clientanswer() const {
  return payload_case() == kClientAnswer;
}
inline bool MessageEnvelope::_internal_has_clientanswer() const {
  return payload_case() == kClientAnswer;
}
inline void MessageEnvelope::set_has_clientanswer() {
  _impl_._oneof_case_[0] = kClientAnswer;
}
inline void MessageEnvelope::clear_clientanswer() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kClientAnswer) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.clientanswer_;
    }
    clear_has_payload();
  }
}
inline ::ClientAnswer* MessageEnvelope::release_clientanswer() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.clientAnswer)
  if (payload_case() == kClientAnswer) {
    clear_has_payload();
    auto* temp = _impl_.payload_.clientanswer_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.clientanswer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ClientAnswer& MessageEnvelope::_internal_clientanswer() const {
  return payload_case() == kClientAnswer ? *_impl_.payload_.clientanswer_ : reinterpret_cast<::ClientAnswer&>(::_ClientAnswer_default_instance_);
}
inline const ::ClientAnswer& MessageEnvelope::clientanswer() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.clientAnswer)
  return _internal_clientanswer();
}
inline ::ClientAnswer* MessageEnvelope::unsafe_arena_release_clientanswer() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.clientAnswer)
  if (payload_case() == kClientAnswer) {
    clear_has_payload();
    auto* temp = _impl_.payload_.clientanswer_;
    _impl_.payload_.clientanswer_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_clientanswer(::ClientAnswer* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_clientanswer();
    _impl_.payload_.clientanswer_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.clientAnswer)
}
inline ::ClientAnswer* MessageEnvelope::_internal_mutable_clientanswer() {
  if (payload_case() != kClientAnswer) {
    clear_payload();
    set_has_clientanswer();
    _impl_.payload_.clientanswer_ = CreateMaybeMessage<::ClientAnswer>(GetArena());
  }
  return _impl_.payload_.clientanswer_;
}
inline ::ClientAnswer* MessageEnvelope::mutable_clientanswer() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ClientAnswer* _msg = _internal_mutable_clientanswer();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.clientAnswer)
  return _msg;
}

// .ServerQuestion serverQuestion = 4;
inline bool MessageEnvelope::has_serverquestion() const {
  return payload_case() == kServerQuestion;
}
inline bool MessageEnvelope::_internal_has_serverquestion() const {
  return payload_case() == kServerQuestion;
}
inline void MessageEnvelope::set_has_serverquestion() {
  _impl_._oneof_case_[0] = kServerQuestion;
}
inline void MessageEnvelope::clear_serverquestion() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kServerQuestion) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.serverquestion_;
    }
    clear_has_payload();
  }
}
inline ::ServerQuestion* MessageEnvelope::release_serverquestion() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.serverQuestion)
  if (payload_case() == kServerQuestion) {
    clear_has_payload();
    auto* temp = _impl_.payload_.serverquestion_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.serverquestion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerQuestion& MessageEnvelope::_internal_serverquestion() const {
  return payload_case() == kServerQuestion ? *_impl_.payload_.serverquestion_ : reinterpret_cast<::ServerQuestion&>(::_ServerQuestion_default_instance_);
}
inline const ::ServerQuestion& MessageEnvelope::serverquestion() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.serverQuestion)
  return _internal_serverquestion();
}
inline ::ServerQuestion* MessageEnvelope::unsafe_arena_release_serverquestion() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.serverQuestion)
  if (payload_case() == kServerQuestion) {
    clear_has_payload();
    auto* temp = _impl_.payload_.serverquestion_;
    _impl_.payload_.serverquestion_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_serverquestion(::ServerQuestion* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_serverquestion();
    _impl_.payload_.serverquestion_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.serverQuestion)
}
inline ::ServerQuestion* MessageEnvelope::_internal_mutable_serverquestion() {
  if (payload_case() != kServerQuestion) {
    clear_payload();
    set_has_serverquestion();
    _impl_.payload_.serverquestion_ = CreateMaybeMessage<::ServerQuestion>(GetArena());
  }
  return _impl_.payload_.serverquestion_;
}
inline ::ServerQuestion* MessageEnvelope::mutable_serverquestion() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ServerQuestion* _msg = _internal_mutable_serverquestion();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.serverQuestion)
  return _msg;
}

// .ServerVerdict serverVerdict = 5;
inline bool MessageEnvelope::has_serververdict() const {
  return payload_case() == kServerVerdict;
}
inline bool MessageEnvelope::_internal_has_serververdict() const {
  return payload_case() == kServerVerdict;
}
inline void MessageEnvelope::set_has_serververdict() {
  _impl_._oneof_case_[0] = kServerVerdict;
}
inline void MessageEnvelope::clear_serververdict() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kServerVerdict) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.serververdict_;
    }
    clear_has_payload();
  }
}
inline ::ServerVerdict* MessageEnvelope::release_serververdict() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.serverVerdict)
  if (payload_case() == kServerVerdict) {
    clear_has_payload();
    auto* temp = _impl_.payload_.serververdict_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.serververdict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::ServerVerdict& MessageEnvelope::_internal_serververdict() const {
  return payload_case() == kServerVerdict ? *_impl_.payload_.serververdict_ : reinterpret_cast<::ServerVerdict&>(::_ServerVerdict_default_instance_);
}
inline const ::ServerVerdict& MessageEnvelope::serververdict() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.serverVerdict)
  return _internal_serververdict();
}
inline ::ServerVerdict* MessageEnvelope::unsafe_arena_release_serververdict() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.serverVerdict)
  if (payload_case() == kServerVerdict) {
    clear_has_payload();
    auto* temp = _impl_.payload_.serververdict_;
    _impl_.payload_.serververdict_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_serververdict(::ServerVerdict* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_serververdict();
    _impl_.payload_.serververdict_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.serverVerdict)
}
inline ::ServerVerdict* MessageEnvelope::_internal_mutable_serververdict() {
  if (payload_case() != kServerVerdict) {
    clear_payload();
    set_has_serververdict();
    _impl_.payload_.serververdict_ = CreateMaybeMessage<::ServerVerdict>(GetArena());
  }
  return _impl_.payload_.serververdict_;
}
inline ::ServerVerdict* MessageEnvelope::mutable_serververdict() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::ServerVerdict* _msg = _internal_mutable_serververdict();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.serverVerdict)
  return _msg;
}

// .QuizChangeRequest quizChangeRequest = 6;
inline bool MessageEnvelope::has_quizchangerequest() const {
  return payload_case() == kQuizChangeRequest;
}
inline bool MessageEnvelope::_internal_has_quizchangerequest() const {
  return payload_case() == kQuizChangeRequest;
}
inline void MessageEnvelope::set_has_quizchangerequest() {
  _impl_._oneof_case_[0] = kQuizChangeRequest;
}
inline void MessageEnvelope::clear_quizchangerequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kQuizChangeRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.quizchangerequest_;
    }
    clear_has_payload();
  }
}
inline ::QuizChangeRequest* MessageEnvelope::release_quizchangerequest() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.quizChangeRequest)
  if (payload_case() == kQuizChangeRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.quizchangerequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.quizchangerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::QuizChangeRequest& MessageEnvelope::_internal_quizchangerequest() const {
  return payload_case() == kQuizChangeRequest ? *_impl_.payload_.quizchangerequest_ : reinterpret_cast<::QuizChangeRequest&>(::_QuizChangeRequest_default_instance_);
}
inline const ::QuizChangeRequest& MessageEnvelope::quizchangerequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.quizChangeRequest)
  return _internal_quizchangerequest();
}
inline ::QuizChangeRequest* MessageEnvelope::unsafe_arena_release_quizchangerequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.quizChangeRequest)
  if (payload_case() == kQuizChangeRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.quizchangerequest_;
    _impl_.payload_.quizchangerequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_quizchangerequest(::QuizChangeRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_quizchangerequest();
    _impl_.payload_.quizchangerequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.quizChangeRequest)
}
inline ::QuizChangeRequest* MessageEnvelope::_internal_mutable_quizchangerequest() {
  if (payload_case() != kQuizChangeRequest) {
    clear_payload();
    set_has_quizchangerequest();
    _impl_.payload_.quizchangerequest_ = CreateMaybeMessage<::QuizChangeRequest>(GetArena());
  }
  return _impl_.payload_.quizchangerequest_;
}
inline ::QuizChangeRequest* MessageEnvelope::mutable_quizchangerequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::QuizChangeRequest* _msg = _internal_mutable_quizchangerequest();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.quizChangeRequest)
  return _msg;
}

// .QuizFilePathsRequest quizFilePathsRequest = 7;
inline bool MessageEnvelope::has_quizfilepathsrequest() const {
  return payload_case() == kQuizFilePathsRequest;
}
inline bool MessageEnvelope::_internal_has_quizfilepathsrequest() const {
  return payload_case() == kQuizFilePathsRequest;
}
inline void MessageEnvelope::set_has_quizfilepathsrequest() {
  _impl_._oneof_case_[0] = kQuizFilePathsRequest;
}
inline void MessageEnvelope::clear_quizfilepathsrequest() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kQuizFilePathsRequest) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.quizfilepathsrequest_;
    }
    clear_has_payload();
  }
}
inline ::QuizFilePathsRequest* MessageEnvelope::release_quizfilepathsrequest() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.quizFilePathsRequest)
  if (payload_case() == kQuizFilePathsRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.quizfilepathsrequest_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.quizfilepathsrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::QuizFilePathsRequest& MessageEnvelope::_internal_quizfilepathsrequest() const {
  return payload_case() == kQuizFilePathsRequest ? *_impl_.payload_.quizfilepathsrequest_ : reinterpret_cast<::QuizFilePathsRequest&>(::_QuizFilePathsRequest_default_instance_);
}
inline const ::QuizFilePathsRequest& MessageEnvelope::quizfilepathsrequest() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.quizFilePathsRequest)
  return _internal_quizfilepathsrequest();
}
inline ::QuizFilePathsRequest* MessageEnvelope::unsafe_arena_release_quizfilepathsrequest() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.quizFilePathsRequest)
  if (payload_case() == kQuizFilePathsRequest) {
    clear_has_payload();
    auto* temp = _impl_.payload_.quizfilepathsrequest_;
    _impl_.payload_.quizfilepathsrequest_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_quizfilepathsrequest(::QuizFilePathsRequest* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_quizfilepathsrequest();
    _impl_.payload_.quizfilepathsrequest_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.quizFilePathsRequest)
}
inline ::QuizFilePathsRequest* MessageEnvelope::_internal_mutable_quizfilepathsrequest() {
  if (payload_case() != kQuizFilePathsRequest) {
    clear_payload();
    set_has_quizfilepathsrequest();
    _impl_.payload_.quizfilepathsrequest_ = CreateMaybeMessage<::QuizFilePathsRequest>(GetArena());
  }
  return _impl_.payload_.quizfilepathsrequest_;
}
inline ::QuizFilePathsRequest* MessageEnvelope::mutable_quizfilepathsrequest() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::QuizFilePathsRequest* _msg = _internal_mutable_quizfilepathsrequest();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.quizFilePathsRequest)
  return _msg;
}

// .QuizFilePaths quizFilePaths = 8;
inline bool MessageEnvelope::has_quizfilepaths() const {
  return payload_case() == kQuizFilePaths;
}
inline bool MessageEnvelope::_internal_has_quizfilepaths() const {
  return payload_case() == kQuizFilePaths;
}
inline void MessageEnvelope::set_has_quizfilepaths() {
  _impl_._oneof_case_[0] = kQuizFilePaths;
}
inline void MessageEnvelope::clear_quizfilepaths() {
  PROTOBUF_TSAN_WRITE(&_impl_._tsan_detect_race);
  if (payload_case() == kQuizFilePaths) {
    if (GetArena() == nullptr) {
      delete _impl_.payload_.quizfilepaths_;
    }
    clear_has_payload();
  }
}
inline ::QuizFilePaths* MessageEnvelope::release_quizfilepaths() {
  // @@protoc_insertion_point(field_release:MessageEnvelope.quizFilePaths)
  if (payload_case() == kQuizFilePaths) {
    clear_has_payload();
    auto* temp = _impl_.payload_.quizfilepaths_;
    if (GetArena() != nullptr) {
      temp = ::google::protobuf::internal::DuplicateIfNonNull(temp);
    }
    _impl_.payload_.quizfilepaths_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline const ::QuizFilePaths& MessageEnvelope::_internal_quizfilepaths() const {
  return payload_case() == kQuizFilePaths ? *_impl_.payload_.quizfilepaths_ : reinterpret_cast<::QuizFilePaths&>(::_QuizFilePaths_default_instance_);
}
inline const ::QuizFilePaths& MessageEnvelope::quizfilepaths() const ABSL_ATTRIBUTE_LIFETIME_BOUND {
  // @@protoc_insertion_point(field_get:MessageEnvelope.quizFilePaths)
  return _internal_quizfilepaths();
}
inline ::QuizFilePaths* MessageEnvelope::unsafe_arena_release_quizfilepaths() {
  // @@protoc_insertion_point(field_unsafe_arena_release:MessageEnvelope.quizFilePaths)
  if (payload_case() == kQuizFilePaths) {
    clear_has_payload();
    auto* temp = _impl_.payload_.quizfilepaths_;
    _impl_.payload_.quizfilepaths_ = nullptr;
    return temp;
  } else {
    return nullptr;
  }
}
inline void MessageEnvelope::unsafe_arena_set_allocated_quizfilepaths(::QuizFilePaths* value) {
  // We rely on the oneof clear method to free the earlier contents
  // of this oneof. We can directly use the pointer we're given to
  // set the new value.
  clear_payload();
  if (value) {
    set_has_quizfilepaths();
    _impl_.payload_.quizfilepaths_ = value;
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:MessageEnvelope.quizFilePaths)
}
inline ::QuizFilePaths* MessageEnvelope::_internal_mutable_quizfilepaths() {
  if (payload_case() != kQuizFilePaths) {
    clear_payload();
    set_has_quizfilepaths();
    _impl_.payload_.quizfilepaths_ = CreateMaybeMessage<::QuizFilePaths>(GetArena());
  }
  return _impl_.payload_.quizfilepaths_;
}
inline ::QuizFilePaths* MessageEnvelope::mutable_quizfilepaths() ABSL_ATTRIBUTE_LIFETIME_BOUND {
  ::QuizFilePaths* _msg = _internal_mutable_quizfilepaths();
  // @@protoc_insertion_point(field_mutable:MessageEnvelope.quizFilePaths)
  return _msg;
}

inline bool MessageEnvelope::has_payload() const {
  return payload_case() != PAYLOAD_NOT_SET;
}
inline void MessageEnvelope::clear_has_payload() {
  _impl_._oneof_case_[0] = PAYLOAD_NOT_SET;
}
inline MessageEnvelope::PayloadCase MessageEnvelope::payload_case() const {
  return MessageEnvelope::PayloadCase(_impl_._oneof_case_[0]);
}
#ifdef __GNUC__
#pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)


namespace google {
namespace protobuf {

template <>
struct is_proto_enum<::MessageEnvelope_MessageType> : std::true_type {};
template <>
inline const EnumDescriptor* GetEnumDescriptor<::MessageEnvelope_MessageType>() {
  return ::MessageEnvelope_MessageType_descriptor();
}

}  // namespace protobuf
}  // namespace google

// @@protoc_insertion_point(global_scope)

#include "google/protobuf/port_undef.inc"

#endif  // GOOGLE_PROTOBUF_INCLUDED_src_2fPackets_2eproto_2epb_2eh
